// ? Task: Нужно написать функцию, возвращающую массив, состоящий из самых наименьших значений вложенных массивов.


// Solution 1
const initArr = [[1, 4, 32, 0, -231, 34, 67, 3], [100, 14, -932, 0, -23, 34, 43, 1], [12, 79, 321, 33, -123, 34, 67, 3]];
const  createArrMinVals=arr=> {
  let arrayOfMinValues = [];
  arr.forEach((subArr) => {
    let minSubArrVal = subArr[0];
    subArr.forEach(item => {
      if (item < minSubArrVal) {
        minSubArrVal = item;
      }
    });
    arrayOfMinValues.push(minSubArrVal);
  });
  return arrayOfMinValues;
}

// Solution 2
// вариант Math.min(...spreadOperator) с методом array.map()

const createArrMinVals2=arr=>arr.map(subArr => Math.min(...subArr));


console.log(createArrMinVals(initArr));
console.log(createArrMinVals2(initArr));
// ! Explanation:
// Первый - решение с помощью вложенных циклов. Для каждого элемента во внешнем массиве перебираем его вложенный массив и найдём наименьшее значение, а затем вставим его в новый массив. Используем forEach(). выполняет функцию callback один раз для каждого элемента, находящегося в массиве в порядке возрастания. Она не будет вызвана для удалённых или пропущенных элементов массива. Функция callback вызывается с тремя аргументами: значением элемента, индексом элемента и массивом, по которому осуществляется проход.

// Второй - использование метода Math.max(...spreadOperator) с методом array.map() для циклического перебора каждого элемента во внешнем массиве, возврата минимального значения из вложенного массива и прямого возврата этого вновь созданного массива. Если вдруг кто-то забыл, то метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива. Функция callback вызывается с тремя аргументами: значением элемента, индексом элемента и массивом, по которому осуществляется проход.